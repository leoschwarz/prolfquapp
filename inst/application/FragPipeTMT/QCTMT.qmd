---
title: "FragPipe TMT QC"
execute:
  echo: false
format: html
editor: visual
editor_options: 
  chunk_output_type: console
params:
  zipfile: NULL
---

```{r}
#| echo: false
#| warning: false
#| message: false
library(prolfquapp)
library(ggplot2)
ggplot2::theme_set(ggplot2::theme_bw())
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE)
```

# Configuration

```{r readYaml}

pathtoZip <- if (exists("params") && !is.null(params$zipfile)) {
  params$zipfile } else { "qcdata/FragPipeTMT_o33281_TMT2.zip"  }
  
files <- unzip(pathtoZip, list = TRUE)

fyaml <- grep(".yaml", files$Name , value = TRUE)
pconfig <- yaml::read_yaml(unz(pathtoZip, filename = fyaml))
application_params <- data.frame(
  name = names(unlist(pconfig$application$parameters)),
                             value = unlist(pconfig$application$parameters))
rownames(application_params) <- NULL
knitr::kable(application_params, caption = "application parameters")

addinfo <- data.frame(name = c("workunit_id", "project_id", "order_id", "datasetname", "fastasequence"),
value =  c(pconfig$job_configuration$workunit_id,
ifelse(is.null(pconfig$job_configuration$project_id), "", pconfig$job_configuration$project_id),
pconfig$job_configuration$order_id,
pconfig$job_configuration$inputdataset$name,
pconfig$job_configuration$fastasequence))

knitr::kable(addinfo, caption = "project information")
```

# FASTA summary

```{r}
ffasta <- grep(".fasta", files$Name , value = TRUE)
fasta <- prozor::readPeptideFasta(unz(pathtoZip,filename =  ffasta))
fastaWithRev <- length(fasta)
fasta <- fasta[!grepl("REV_", names(fasta))]
fastaNoRev <- length(fasta)
x <- prozor::make_fasta_summary(fasta,as_string = TRUE)

```

The FASTA database has `r fastaWithRev` sequences including decoys, and `r fastaNoRev` without decoys.
Below are the amino acids frequencies .

```{r}
#| echo: true
cat(x)

```

PSM files in zip archive, QC will only use the first psm file.

```{r}
fpsm <- grep("psm.tsv", files$Name , value = TRUE)
cat(paste(fpsm, seq = "\n"))
fpsm <- fpsm[1]
cat("using :", fpsm)
```

```{r}
fdataset <- grep("dataset.csv", files$Name, value = TRUE)

dataset <- readr::read_csv(unz(pathtoZip, filename = fdataset))
psmFuLL <- readr::read_tsv(unz(pathtoZip,filename =  fpsm))

xx <- readr::read_tsv(unz(pathtoZip,filename =  fpsm))
nrSpectraAll <- xx$Spectrum |> unique() |> length()


psm <- prolfqua::tidy_FragPipe_psm(unz(pathtoZip,filename =  fpsm), purity_threshold = 0, PeptideProphetProb = 0.9, abundance_threshold = 0)
nrowPSM <- nrow(psm)
nrSpectraPP09 <- psm$Spectrum |> unique() |> length()

```

For this analysis we are using all PSM (Spectra) reported in the psm.tsv file with a peptide prophet probability greater than $0.9$, and an abundance value in any of the channels greater then $0$. No other filtering is enabled.
This reduces the number of PSM from `r nrSpectraAll` to `r nrSpectraPP09`.

```{r}

fasta_annot <- get_annot_from_fasta(unz(pathtoZip, filename = ffasta))
psm <- dplyr::inner_join(psm, fasta_annot, by = c(Protein = "fasta.id"), multiple = "all")

stopifnot(nrow(psm) == nrowPSM)

prot_annot <- prolfquapp::dataset_protein_annot(
  psm,
  c("protein_Id" = "Protein"),
  protein_annot = "fasta.header",
  more_columns = "nrPeptides")
# prot_annot |> filter(grepl("^zz",protein_Id)) |> head()

psm$qValue <- 1 - psm$PeptideProphet.Probability

atable <- prolfqua::AnalysisTableAnnotation$new()
atable$ident_Score = "PeptideProphet.Probability"
atable$ident_qValue = "qValue"
atable$fileName = "channel"

atable$opt_rt = "Retention"
atable$opt_mz = "psmcharge"

atable$hierarchy[["protein_Id"]] <- c("Protein")
atable$hierarchy[["peptide_Id"]] <- c("Peptide")
atable$hierarchy[["mod_peptide_Id"]] <- c("Modified.Peptide","Assigned.Modifications")
atable$hierarchy[["precursor"]] <- c("Modified.Peptide","Assigned.Modifications", "Charge")
atable$hierarchy[["Spectrum"]] <- c("Spectrum")

atable$factors[["experiment"]] <- "experiment"
atable$set_response("abundance")

psm$experiment <- "QC"
psm$psmcharge <- psm$Charge
config <- prolfqua::AnalysisConfiguration$new(atable)

adata <- prolfqua::setup_analysis(psm, config)

lfqdata <- prolfqua::LFQData$new(adata, config)

allmods <- lfqdata$data |> dplyr::select(mod_peptide_Id, Spectrum) |> dplyr::distinct()
allmods <- allmods |> dplyr::group_by(mod_peptide_Id) |> dplyr::summarize(n = dplyr::n())
allmods <- allmods |> tidyr::separate(mod_peptide_Id, into = c("modSeq", "Assigned.Modifications"), sep = "~")
allmods <- allmods |> tidyr::separate_longer_delim("Assigned.Modifications", delim = ",")
allmods <- allmods |> dplyr::mutate(Assigned.Modifications = trimws(Assigned.Modifications))
allmods <- allmods |> dplyr::mutate(Modification = gsub("^[0-9]+","", Assigned.Modifications))


```



# Identification Summary

```{r}

knitr::kable(lfqdata$hierarchy_counts(), caption = "Nr of proteins, peptides, peptidoforms, precursors, psms")

```

```{r, fig.height=10, fig.cap="Number of proteins etc per channel."}
st <- lfqdata$get_Summariser()
st$plot_hierarchy_counts_sample()
```

```{r}
knitr::kable(st$hierarchy_counts_sample(), caption = "Number of proteins etc per channel.")
```

# Modifications Summary

```{r}
tx <- allmods$Modification |> table()
knitr::kable(tx, caption = "Number of modifications observed in the data.")
```

```{r fig.cap = "Number of modification observed in the data."}
barplot(tx, las = 2)
```

# Labelling Efficiency

## N-term

### Peptides

```{r }
allmods$n1 <- 1
xA <- allmods |> dplyr::select(modSeq, n, n1) |> dplyr::distinct()
xN <- allmods |> dplyr::filter(Modification == "N-term(229.1629)")
xN <- xN |> dplyr::select(modSeq, n, n1) |> dplyr::distinct()

nrNtermMod <- xN$n1 |> sum()
nrPeptides <- xA$n1 |> sum()
```

- Total number of peptides : `r nrPeptides`
- Number of peptides with modified N-term : `r nrNtermMod`
- Percent peptides with modified N-term: `r round(nrNtermMod/nrPeptides*100)` \%


### PSM's

```{r }

nrNtermMod <- xN$n |> sum()
nrPeptides <- xA$n |> sum()

```

- Total number of PSMs : `r nrPeptides`
- Number of PSMs with modified N-term : `r nrNtermMod`
- Percent PSMs with modified N-term: `r round(nrNtermMod/nrPeptides*100)` \%



## Lysine

### Peptides

```{r}
xL <- allmods |> dplyr::filter(Modification == "K(229.1629)")
xN <- allmods |> dplyr::select(.data$modSeq, n, n1) |> dplyr::distinct()
xN <- xN |> dplyr::filter(grepl("K", modSeq))


```

- Total number of peptides with Lysine: `r xN$n1 |> sum()`
- Number of peptides with modified Lysine residues : `r xL$n1 |> sum()`
- Percent peptides with modified Lysine residues: `r round((xL$n1 |> sum())/(xN$n1 |> sum())*100)` \%

### PSM's

- Total number of PSMs with Lysine: `r xN$n |> sum()`
- Number of PSMs with modified Lysine residues : `r xL$n |> sum()`
- Percent PSMs with modified Lysine residues: `r round((xL$n |> sum())/(xN$n |> sum())*100)` \%


### Residues in peptidoforms

```{r}

nrK <- stringr::str_count(xN$modSeq,"K") 
nrKmod <- stringr::str_count(xN$modSeq,"K\\[")

```

- Total number of Lysine residues: `r (nrK * xN$n1) |> sum() `
- Number of modified Lysine residues : `r (nrKmod * xN$n1) |> sum()`
- Percent modified Lysine residues: `r round( ((nrKmod * xN$n) |> sum()) / ((nrK * xN$n) |> sum()) * 100)` \%

### Residues in PSM's

- Total number of Lysine residues: `r (nrK * xN$n) |> sum() `
- Number of modified Lysine residues : `r (nrKmod * xN$n) |> sum()`
- Percent modified Lysine residues when taking number of PSMs into account: `r round( ((nrKmod * xN$n) |> sum()) / ((nrK * xN$n) |> sum() ) * 100 )  ` \%


# Quantitative information per channel

```{r total, fig.cap = "Total abundance per channel (Sum of all abundances)."}

xx <- lfqdata$data
totalPerChannel <- xx |> dplyr::group_by(!!sym(lfqdata$config$table$sampleName) ) |>
  dplyr::summarize(totalAbundance = sum(!!sym(lfqdata$response()), na.rm=TRUE))

totalPerChannel |> ggplot2::ggplot(ggplot2::aes(x = sampleName, y = totalAbundance)) + 
  ggplot2::geom_bar(stat = "identity", position = "dodge", colour = "black", fill = "white") + 
  ggplot2::theme(axis.text.x = ggplot2::element_text(angle = 90, vjust = 0.5, hjust=1))
```


```{r relatvie, fig.cap = "Ralative to chanell 126 total abundance per chanel."}
nudgeval = 0.1
p126 <- totalPerChannel |> dplyr::filter(grepl("126",sampleName) )
totalPerChannel$norm126abundance <- totalPerChannel$totalAbundance / p126$totalAbundance
totalPerChannel |> ggplot2::ggplot(aes(x = sampleName, y = norm126abundance)) + 
  ggplot2::geom_bar(stat = "identity", position = "dodge", colour = "black", fill = "white") + 
  ggplot2::geom_text(ggplot2::aes(label = round(.data$norm126abundance,2)), nudge_y = nudgeval, angle = 65) +
  ggplot2::theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
# TODO add numbers to bars and table.
```


```{r density, fig.cap="Density of abundance values per channel."}
pl <- lfqdata$get_Plotter()
pl$intensity_distribution_density()
```


# Missed cleavage

Missed cleavage site: Is a resdiue after which trypsin should have cleaved but did not. 

To detrmine the number of missed cleavages we comptue:
- the number of all potential cleavage site, i.e. number of residues, e.g. K
- the number of not missed cleavage sites, that is all K at the C term plus those K which are modified and therefore not recognized by trypsin.


## Missed Lysine residues


We compute the total number of K residues, and the number of K cleavage sites (nr of potential cleavage sites).
Then we compute the number of K at the C-term 


```{r}
modSeqD <- allmods |> dplyr::select(modSeq, n) |> dplyr::distinct() 
patterns <- list(R = "K", termR = "K$", termRmod = "K\\[[0-9]+\\]$", termR_termRmod = "K$|K\\[[0-9]+\\]$", Rmod = "K\\[[0-9]+\\]")
modSeqD$n1 <- 1


match_count <- function(p, data, count_col = "n") {
  nr <- stringr::str_count(data$modSeq, pattern = p) 
  nr <- (nr * data[[count_col]]) |> sum()
  return(nr)
}

r <- lapply(patterns, match_count, modSeqD, count_col = "n")
```

- The number of K residues `r r$R`
- The number of unmodified K at C term `r r$termR`
- The number of modified K at C term `r r$termRmod`
- The number of any K at C term `r r$termR_termRmod`
- The number of any modified K: `r r$Rmod`
- Missed cleavage sites : number of K residues - number of any K at C term = `r r$R - r$termR_termRmod`,
- and in \% of number of K residues : `r round((r$R - r$termR_termRmod)/r$R *100)`


## Missed Arginine residues

```{r}
patterns <- list(R = "R", termR = "R$", termRmod = "R\\[[0-9]+\\]$", termR_termRmod = "R$|R\\[[0-9]+\\]$", Rmod = "R\\[[0-9]+\\]")
modSeqD$n1 <- 1
r <- lapply(patterns, match_count, modSeqD, count_col = "n")

```

- The number of R residues `r r$R`
- The number of unmodified R at C term `r r$termR`
- The number of modified R at C term `r r$termRmod`
- The number of any R at C term `r r$termR_termRmod`
- The number of any modified R: `r r$Rmod`
- Missed cleavage sites : number of R residues - number of any R at C term = `r r$R - r$termR_termRmod`,
- and in \%  of number of R residues : `r round((r$R - r$termR_termRmod)/r$R *100)`

# Session Info

```{r}
sessionInfo()
```
